use std::env;
use std::fs;
use std::path::Path;
use serde::Deserialize;

#[derive(Deserialize)]
struct SystemConfig {
    name: String,
    #[serde(rename = "type")]
    sys_type: String,
    package: String,
    #[serde(default)]
    always: bool,
    feature: Option<String>,
}

#[derive(Deserialize)]
struct Config {
    systems: Vec<SystemConfig>,
}

fn main() {
    println!("cargo:rerun-if-changed=systems.toml");
    
    let out_dir = env::var("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("system_loader_impl.rs");
    
    // Read config file
    let manifest_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let config_path = Path::new(&manifest_dir).join("systems.toml");
    let config_str = fs::read_to_string(config_path).expect("Failed to read systems.toml");
    let config: Config = toml::from_str(&config_str).expect("Failed to parse systems.toml");
    
    // Template for system registration
    let system_template = r#"
    {condition}
    {{
        let system = {package}::create_{type}_system();
        playground_core_ecs::register_{type}_system(system).await?;
    }}"#;
    
    // Generate registrations
    let mut registrations = Vec::new();
    for system in &config.systems {
        let condition = if system.always {
            String::new()  // No condition, always load
        } else if let Some(feature) = &system.feature {
            format!("#[cfg(feature = \"{}\")]", feature)
        } else {
            continue;  // Skip if neither always nor feature
        };
        
        registrations.push(
            system_template
                .replace("{condition}", &condition)
                .replace("{package}", &system.package)
                .replace("{type}", &system.sys_type)
        );
    }
    
    // Final file template
    let file_template = r#"// Auto-generated by build.rs - DO NOT EDIT
// Generated from systems.toml configuration

async fn load_all_systems_impl() -> Result<(), EcsError> {{registrations}
    Ok(())
}
"#;
    
    let code = file_template.replace(
        "{registrations}",
        &registrations.join("")
    );
    
    fs::write(&dest_path, code).unwrap();
    
    // Also tell cargo to link the system packages if their features are enabled
    for system in &config.systems {
        if let Some(feature) = &system.feature {
            println!("cargo:rustc-cfg=feature=\"{}\"", feature);
        }
    }
}